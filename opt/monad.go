// Code generated by generate_monad.go; DO NOT EDIT.
package opt

//go:generate go run internal/generate/generate_monad.go
import (
	"context"
)

func ApplyVoid[T1 any](
	t1 Opt[T1],
	fn func(t1 T1),
) {
	v1, ok1 := t1.Get()

	if ok1 {
		fn(v1)
	}

	return
}

func MonadVoid[T1 any](
	fn func(t1 T1),
) func(t1 Opt[T1]) {
	return func(t1 Opt[T1]) {
		ApplyVoid(t1, fn)
	}
}

func ApplyVoidCtx[T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1),
) {
	v1, ok1 := t1.Get()

	if ok1 {
		fn(ctx, v1)
	}

	return
}

func MonadVoidCtx[T1 any](
	fn func(ctx context.Context, t1 T1),
) func(ctx context.Context, t1 Opt[T1]) {
	return func(ctx context.Context, t1 Opt[T1]) {
		ApplyVoidCtx(ctx, t1, fn)
	}
}

func ApplyVoidErr[T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (err error),
) (err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		return fn(v1)
	}

	return
}

func MonadVoidErr[T1 any](
	fn func(t1 T1) (err error),
) func(t1 Opt[T1]) (err error) {
	return func(t1 Opt[T1]) (err error) {
		return ApplyVoidErr(t1, fn)
	}
}

func ApplyVoidCtxErr[T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (err error),
) (err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		return fn(ctx, v1)
	}

	return
}

func MonadVoidCtxErr[T1 any](
	fn func(ctx context.Context, t1 T1) (err error),
) func(ctx context.Context, t1 Opt[T1]) (err error) {
	return func(ctx context.Context, t1 Opt[T1]) (err error) {
		return ApplyVoidCtxErr(ctx, t1, fn)
	}
}

func Apply[R1, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1 := fn(v1)

		return Literal(x1)
	}

	return
}

func Monad[R1, T1 any](
	fn func(t1 T1) (r1 R1),
) func(t1 Opt[T1]) (r1 Opt[R1]) {
	return func(t1 Opt[T1]) (r1 Opt[R1]) {
		return Apply(t1, fn)
	}
}

func ApplyCtx[R1, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1 := fn(ctx, v1)

		return Literal(x1)
	}

	return
}

func MonadCtx[R1, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1]) {
		return ApplyCtx(ctx, t1, fn)
	}
}

func ApplyErr[R1, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, err := fn(v1)

		return Literal(x1), err
	}

	return
}

func MonadErr[R1, T1 any](
	fn func(t1 T1) (r1 R1, err error),
) func(t1 Opt[T1]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1]) (r1 Opt[R1], err error) {
		return ApplyErr(t1, fn)
	}
}

func ApplyCtxErr[R1, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, err := fn(ctx, v1)

		return Literal(x1), err
	}

	return
}

func MonadCtxErr[R1, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], err error) {
		return ApplyCtxErr(ctx, t1, fn)
	}
}

func Apply12[R1, R2, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2 := fn(v1)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad12[R1, R2, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply12(t1, fn)
	}
}

func Apply12Ctx[R1, R2, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2 := fn(ctx, v1)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad12Ctx[R1, R2, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply12Ctx(ctx, t1, fn)
	}
}

func Apply12Err[R1, R2, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, err := fn(v1)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad12Err[R1, R2, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply12Err(t1, fn)
	}
}

func Apply12CtxErr[R1, R2, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, err := fn(ctx, v1)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad12CtxErr[R1, R2, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply12CtxErr(ctx, t1, fn)
	}
}

func Apply13[R1, R2, R3, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3 := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad13[R1, R2, R3, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply13(t1, fn)
	}
}

func Apply13Ctx[R1, R2, R3, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3 := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad13Ctx[R1, R2, R3, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply13Ctx(ctx, t1, fn)
	}
}

func Apply13Err[R1, R2, R3, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, err := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad13Err[R1, R2, R3, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply13Err(t1, fn)
	}
}

func Apply13CtxErr[R1, R2, R3, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, err := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad13CtxErr[R1, R2, R3, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply13CtxErr(ctx, t1, fn)
	}
}

func Apply14[R1, R2, R3, R4, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4 := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad14[R1, R2, R3, R4, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply14(t1, fn)
	}
}

func Apply14Ctx[R1, R2, R3, R4, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4 := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad14Ctx[R1, R2, R3, R4, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply14Ctx(ctx, t1, fn)
	}
}

func Apply14Err[R1, R2, R3, R4, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, err := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad14Err[R1, R2, R3, R4, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply14Err(t1, fn)
	}
}

func Apply14CtxErr[R1, R2, R3, R4, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, err := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad14CtxErr[R1, R2, R3, R4, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply14CtxErr(ctx, t1, fn)
	}
}

func Apply15[R1, R2, R3, R4, R5, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, x5 := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad15[R1, R2, R3, R4, R5, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply15(t1, fn)
	}
}

func Apply15Ctx[R1, R2, R3, R4, R5, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, x5 := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad15Ctx[R1, R2, R3, R4, R5, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply15Ctx(ctx, t1, fn)
	}
}

func Apply15Err[R1, R2, R3, R4, R5, T1 any](
	t1 Opt[T1],
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, x5, err := fn(v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad15Err[R1, R2, R3, R4, R5, T1 any](
	fn func(t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply15Err(t1, fn)
	}
}

func Apply15CtxErr[R1, R2, R3, R4, R5, T1 any](
	ctx context.Context, t1 Opt[T1],
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()

	if ok1 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad15CtxErr[R1, R2, R3, R4, R5, T1 any](
	fn func(ctx context.Context, t1 T1) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply15CtxErr(ctx, t1, fn)
	}
}

func Apply2Void[T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		fn(v1, v2)
	}

	return
}

func Monad2Void[T1, T2 any](
	fn func(t1 T1, t2 T2),
) func(t1 Opt[T1], t2 Opt[T2]) {
	return func(t1 Opt[T1], t2 Opt[T2]) {
		Apply2Void(t1, t2, fn)
	}
}

func Apply2VoidCtx[T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		fn(ctx, v1, v2)
	}

	return
}

func Monad2VoidCtx[T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) {
		Apply2VoidCtx(ctx, t1, t2, fn)
	}
}

func Apply2VoidErr[T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		return fn(v1, v2)
	}

	return
}

func Monad2VoidErr[T1, T2 any](
	fn func(t1 T1, t2 T2) (err error),
) func(t1 Opt[T1], t2 Opt[T2]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (err error) {
		return Apply2VoidErr(t1, t2, fn)
	}
}

func Apply2VoidCtxErr[T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		return fn(ctx, v1, v2)
	}

	return
}

func Monad2VoidCtxErr[T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (err error) {
		return Apply2VoidCtxErr(ctx, t1, t2, fn)
	}
}

func Apply2[R1, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1 := fn(v1, v2)

		return Literal(x1)
	}

	return
}

func Monad2[R1, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1]) {
		return Apply2(t1, t2, fn)
	}
}

func Apply2Ctx[R1, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1 := fn(ctx, v1, v2)

		return Literal(x1)
	}

	return
}

func Monad2Ctx[R1, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1]) {
		return Apply2Ctx(ctx, t1, t2, fn)
	}
}

func Apply2Err[R1, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, err := fn(v1, v2)

		return Literal(x1), err
	}

	return
}

func Monad2Err[R1, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], err error) {
		return Apply2Err(t1, t2, fn)
	}
}

func Apply2CtxErr[R1, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, err := fn(ctx, v1, v2)

		return Literal(x1), err
	}

	return
}

func Monad2CtxErr[R1, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], err error) {
		return Apply2CtxErr(ctx, t1, t2, fn)
	}
}

func Apply22[R1, R2, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2 := fn(v1, v2)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad22[R1, R2, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply22(t1, t2, fn)
	}
}

func Apply22Ctx[R1, R2, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2 := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad22Ctx[R1, R2, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply22Ctx(ctx, t1, t2, fn)
	}
}

func Apply22Err[R1, R2, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, err := fn(v1, v2)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad22Err[R1, R2, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply22Err(t1, t2, fn)
	}
}

func Apply22CtxErr[R1, R2, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, err := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad22CtxErr[R1, R2, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply22CtxErr(ctx, t1, t2, fn)
	}
}

func Apply23[R1, R2, R3, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3 := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad23[R1, R2, R3, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply23(t1, t2, fn)
	}
}

func Apply23Ctx[R1, R2, R3, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3 := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad23Ctx[R1, R2, R3, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply23Ctx(ctx, t1, t2, fn)
	}
}

func Apply23Err[R1, R2, R3, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, err := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad23Err[R1, R2, R3, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply23Err(t1, t2, fn)
	}
}

func Apply23CtxErr[R1, R2, R3, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, err := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad23CtxErr[R1, R2, R3, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply23CtxErr(ctx, t1, t2, fn)
	}
}

func Apply24[R1, R2, R3, R4, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4 := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad24[R1, R2, R3, R4, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply24(t1, t2, fn)
	}
}

func Apply24Ctx[R1, R2, R3, R4, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4 := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad24Ctx[R1, R2, R3, R4, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply24Ctx(ctx, t1, t2, fn)
	}
}

func Apply24Err[R1, R2, R3, R4, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, err := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad24Err[R1, R2, R3, R4, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply24Err(t1, t2, fn)
	}
}

func Apply24CtxErr[R1, R2, R3, R4, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad24CtxErr[R1, R2, R3, R4, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply24CtxErr(ctx, t1, t2, fn)
	}
}

func Apply25[R1, R2, R3, R4, R5, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, x5 := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad25[R1, R2, R3, R4, R5, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply25(t1, t2, fn)
	}
}

func Apply25Ctx[R1, R2, R3, R4, R5, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad25Ctx[R1, R2, R3, R4, R5, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply25Ctx(ctx, t1, t2, fn)
	}
}

func Apply25Err[R1, R2, R3, R4, R5, T1, T2 any](
	t1 Opt[T1], t2 Opt[T2],
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, x5, err := fn(v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad25Err[R1, R2, R3, R4, R5, T1, T2 any](
	fn func(t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply25Err(t1, t2, fn)
	}
}

func Apply25CtxErr[R1, R2, R3, R4, R5, T1, T2 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2],
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()

	if ok1 && ok2 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad25CtxErr[R1, R2, R3, R4, R5, T1, T2 any](
	fn func(ctx context.Context, t1 T1, t2 T2) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply25CtxErr(ctx, t1, t2, fn)
	}
}

func Apply3Void[T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		fn(v1, v2, v3)
	}

	return
}

func Monad3Void[T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) {
		Apply3Void(t1, t2, t3, fn)
	}
}

func Apply3VoidCtx[T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		fn(ctx, v1, v2, v3)
	}

	return
}

func Monad3VoidCtx[T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) {
		Apply3VoidCtx(ctx, t1, t2, t3, fn)
	}
}

func Apply3VoidErr[T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		return fn(v1, v2, v3)
	}

	return
}

func Monad3VoidErr[T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (err error) {
		return Apply3VoidErr(t1, t2, t3, fn)
	}
}

func Apply3VoidCtxErr[T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		return fn(ctx, v1, v2, v3)
	}

	return
}

func Monad3VoidCtxErr[T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (err error) {
		return Apply3VoidCtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply3[R1, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1 := fn(v1, v2, v3)

		return Literal(x1)
	}

	return
}

func Monad3[R1, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1]) {
		return Apply3(t1, t2, t3, fn)
	}
}

func Apply3Ctx[R1, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1 := fn(ctx, v1, v2, v3)

		return Literal(x1)
	}

	return
}

func Monad3Ctx[R1, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1]) {
		return Apply3Ctx(ctx, t1, t2, t3, fn)
	}
}

func Apply3Err[R1, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, err := fn(v1, v2, v3)

		return Literal(x1), err
	}

	return
}

func Monad3Err[R1, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], err error) {
		return Apply3Err(t1, t2, t3, fn)
	}
}

func Apply3CtxErr[R1, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, err := fn(ctx, v1, v2, v3)

		return Literal(x1), err
	}

	return
}

func Monad3CtxErr[R1, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], err error) {
		return Apply3CtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply32[R1, R2, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2 := fn(v1, v2, v3)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad32[R1, R2, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply32(t1, t2, t3, fn)
	}
}

func Apply32Ctx[R1, R2, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2 := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad32Ctx[R1, R2, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply32Ctx(ctx, t1, t2, t3, fn)
	}
}

func Apply32Err[R1, R2, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, err := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad32Err[R1, R2, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply32Err(t1, t2, t3, fn)
	}
}

func Apply32CtxErr[R1, R2, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, err := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad32CtxErr[R1, R2, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply32CtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply33[R1, R2, R3, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3 := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad33[R1, R2, R3, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply33(t1, t2, t3, fn)
	}
}

func Apply33Ctx[R1, R2, R3, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3 := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad33Ctx[R1, R2, R3, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply33Ctx(ctx, t1, t2, t3, fn)
	}
}

func Apply33Err[R1, R2, R3, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, err := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad33Err[R1, R2, R3, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply33Err(t1, t2, t3, fn)
	}
}

func Apply33CtxErr[R1, R2, R3, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad33CtxErr[R1, R2, R3, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply33CtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply34[R1, R2, R3, R4, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4 := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad34[R1, R2, R3, R4, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply34(t1, t2, t3, fn)
	}
}

func Apply34Ctx[R1, R2, R3, R4, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad34Ctx[R1, R2, R3, R4, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply34Ctx(ctx, t1, t2, t3, fn)
	}
}

func Apply34Err[R1, R2, R3, R4, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, err := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad34Err[R1, R2, R3, R4, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply34Err(t1, t2, t3, fn)
	}
}

func Apply34CtxErr[R1, R2, R3, R4, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad34CtxErr[R1, R2, R3, R4, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply34CtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply35[R1, R2, R3, R4, R5, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad35[R1, R2, R3, R4, R5, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply35(t1, t2, t3, fn)
	}
}

func Apply35Ctx[R1, R2, R3, R4, R5, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad35Ctx[R1, R2, R3, R4, R5, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply35Ctx(ctx, t1, t2, t3, fn)
	}
}

func Apply35Err[R1, R2, R3, R4, R5, T1, T2, T3 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad35Err[R1, R2, R3, R4, R5, T1, T2, T3 any](
	fn func(t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply35Err(t1, t2, t3, fn)
	}
}

func Apply35CtxErr[R1, R2, R3, R4, R5, T1, T2, T3 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()

	if ok1 && ok2 && ok3 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad35CtxErr[R1, R2, R3, R4, R5, T1, T2, T3 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply35CtxErr(ctx, t1, t2, t3, fn)
	}
}

func Apply4Void[T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		fn(v1, v2, v3, v4)
	}

	return
}

func Monad4Void[T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) {
		Apply4Void(t1, t2, t3, t4, fn)
	}
}

func Apply4VoidCtx[T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		fn(ctx, v1, v2, v3, v4)
	}

	return
}

func Monad4VoidCtx[T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) {
		Apply4VoidCtx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply4VoidErr[T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		return fn(v1, v2, v3, v4)
	}

	return
}

func Monad4VoidErr[T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (err error) {
		return Apply4VoidErr(t1, t2, t3, t4, fn)
	}
}

func Apply4VoidCtxErr[T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		return fn(ctx, v1, v2, v3, v4)
	}

	return
}

func Monad4VoidCtxErr[T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (err error) {
		return Apply4VoidCtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply4[R1, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1 := fn(v1, v2, v3, v4)

		return Literal(x1)
	}

	return
}

func Monad4[R1, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1]) {
		return Apply4(t1, t2, t3, t4, fn)
	}
}

func Apply4Ctx[R1, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1 := fn(ctx, v1, v2, v3, v4)

		return Literal(x1)
	}

	return
}

func Monad4Ctx[R1, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1]) {
		return Apply4Ctx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply4Err[R1, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, err := fn(v1, v2, v3, v4)

		return Literal(x1), err
	}

	return
}

func Monad4Err[R1, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], err error) {
		return Apply4Err(t1, t2, t3, t4, fn)
	}
}

func Apply4CtxErr[R1, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, err := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), err
	}

	return
}

func Monad4CtxErr[R1, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], err error) {
		return Apply4CtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply42[R1, R2, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2 := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad42[R1, R2, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply42(t1, t2, t3, t4, fn)
	}
}

func Apply42Ctx[R1, R2, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2 := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad42Ctx[R1, R2, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply42Ctx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply42Err[R1, R2, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, err := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad42Err[R1, R2, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply42Err(t1, t2, t3, t4, fn)
	}
}

func Apply42CtxErr[R1, R2, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad42CtxErr[R1, R2, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply42CtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply43[R1, R2, R3, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3 := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad43[R1, R2, R3, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply43(t1, t2, t3, t4, fn)
	}
}

func Apply43Ctx[R1, R2, R3, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad43Ctx[R1, R2, R3, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply43Ctx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply43Err[R1, R2, R3, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, err := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad43Err[R1, R2, R3, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply43Err(t1, t2, t3, t4, fn)
	}
}

func Apply43CtxErr[R1, R2, R3, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad43CtxErr[R1, R2, R3, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply43CtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply44[R1, R2, R3, R4, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad44[R1, R2, R3, R4, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply44(t1, t2, t3, t4, fn)
	}
}

func Apply44Ctx[R1, R2, R3, R4, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad44Ctx[R1, R2, R3, R4, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply44Ctx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply44Err[R1, R2, R3, R4, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad44Err[R1, R2, R3, R4, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply44Err(t1, t2, t3, t4, fn)
	}
}

func Apply44CtxErr[R1, R2, R3, R4, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad44CtxErr[R1, R2, R3, R4, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply44CtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply45[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad45[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply45(t1, t2, t3, t4, fn)
	}
}

func Apply45Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad45Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply45Ctx(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply45Err[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad45Err[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply45Err(t1, t2, t3, t4, fn)
	}
}

func Apply45CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()

	if ok1 && ok2 && ok3 && ok4 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad45CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply45CtxErr(ctx, t1, t2, t3, t4, fn)
	}
}

func Apply5Void[T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		fn(v1, v2, v3, v4, v5)
	}

	return
}

func Monad5Void[T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) {
		Apply5Void(t1, t2, t3, t4, t5, fn)
	}
}

func Apply5VoidCtx[T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		fn(ctx, v1, v2, v3, v4, v5)
	}

	return
}

func Monad5VoidCtx[T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) {
		Apply5VoidCtx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply5VoidErr[T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		return fn(v1, v2, v3, v4, v5)
	}

	return
}

func Monad5VoidErr[T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (err error) {
		return Apply5VoidErr(t1, t2, t3, t4, t5, fn)
	}
}

func Apply5VoidCtxErr[T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		return fn(ctx, v1, v2, v3, v4, v5)
	}

	return
}

func Monad5VoidCtxErr[T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (err error) {
		return Apply5VoidCtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply5[R1, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1 := fn(v1, v2, v3, v4, v5)

		return Literal(x1)
	}

	return
}

func Monad5[R1, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1]) {
		return Apply5(t1, t2, t3, t4, t5, fn)
	}
}

func Apply5Ctx[R1, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1 := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1)
	}

	return
}

func Monad5Ctx[R1, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1]) {
		return Apply5Ctx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply5Err[R1, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, err := fn(v1, v2, v3, v4, v5)

		return Literal(x1), err
	}

	return
}

func Monad5Err[R1, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], err error) {
		return Apply5Err(t1, t2, t3, t4, t5, fn)
	}
}

func Apply5CtxErr[R1, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, err := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), err
	}

	return
}

func Monad5CtxErr[R1, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], err error) {
		return Apply5CtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply52[R1, R2, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2 := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad52[R1, R2, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply52(t1, t2, t3, t4, t5, fn)
	}
}

func Apply52Ctx[R1, R2, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2 := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad52Ctx[R1, R2, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply52Ctx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply52Err[R1, R2, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, err := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad52Err[R1, R2, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply52Err(t1, t2, t3, t4, t5, fn)
	}
}

func Apply52CtxErr[R1, R2, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad52CtxErr[R1, R2, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply52CtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply53[R1, R2, R3, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3 := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad53[R1, R2, R3, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply53(t1, t2, t3, t4, t5, fn)
	}
}

func Apply53Ctx[R1, R2, R3, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad53Ctx[R1, R2, R3, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply53Ctx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply53Err[R1, R2, R3, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, err := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad53Err[R1, R2, R3, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply53Err(t1, t2, t3, t4, t5, fn)
	}
}

func Apply53CtxErr[R1, R2, R3, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad53CtxErr[R1, R2, R3, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply53CtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply54[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad54[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply54(t1, t2, t3, t4, t5, fn)
	}
}

func Apply54Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad54Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply54Ctx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply54Err[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad54Err[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply54Err(t1, t2, t3, t4, t5, fn)
	}
}

func Apply54CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad54CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply54CtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply55[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad55[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply55(t1, t2, t3, t4, t5, fn)
	}
}

func Apply55Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad55Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply55Ctx(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply55Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad55Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply55Err(t1, t2, t3, t4, t5, fn)
	}
}

func Apply55CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4, v5)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad55CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply55CtxErr(ctx, t1, t2, t3, t4, t5, fn)
	}
}

func Apply6Void[T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		fn(v1, v2, v3, v4, v5, v6)
	}

	return
}

func Monad6Void[T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) {
		Apply6Void(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6VoidCtx[T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		fn(ctx, v1, v2, v3, v4, v5, v6)
	}

	return
}

func Monad6VoidCtx[T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) {
		Apply6VoidCtx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6VoidErr[T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		return fn(v1, v2, v3, v4, v5, v6)
	}

	return
}

func Monad6VoidErr[T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (err error) {
		return Apply6VoidErr(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6VoidCtxErr[T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		return fn(ctx, v1, v2, v3, v4, v5, v6)
	}

	return
}

func Monad6VoidCtxErr[T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (err error) {
		return Apply6VoidCtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6[R1, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1 := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1)
	}

	return
}

func Monad6[R1, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1]) {
		return Apply6(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6Ctx[R1, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1 := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1)
	}

	return
}

func Monad6Ctx[R1, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1]) {
		return Apply6Ctx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6Err[R1, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, err := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), err
	}

	return
}

func Monad6Err[R1, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], err error) {
		return Apply6Err(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply6CtxErr[R1, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, err := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), err
	}

	return
}

func Monad6CtxErr[R1, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], err error) {
		return Apply6CtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply62[R1, R2, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2 := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad62[R1, R2, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply62(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply62Ctx[R1, R2, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2 := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad62Ctx[R1, R2, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply62Ctx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply62Err[R1, R2, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, err := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad62Err[R1, R2, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply62Err(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply62CtxErr[R1, R2, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad62CtxErr[R1, R2, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply62CtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply63[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3 := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad63[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply63(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply63Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad63Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply63Ctx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply63Err[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, err := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad63Err[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply63Err(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply63CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad63CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply63CtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply64[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad64[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply64(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply64Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad64Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply64Ctx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply64Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad64Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply64Err(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply64CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad64CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply64CtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply65[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad65[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply65(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply65Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad65Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply65Ctx(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply65Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad65Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply65Err(t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply65CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4, v5, v6)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad65CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply65CtxErr(ctx, t1, t2, t3, t4, t5, t6, fn)
	}
}

func Apply7Void[T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		fn(v1, v2, v3, v4, v5, v6, v7)
	}

	return
}

func Monad7Void[T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) {
		Apply7Void(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7VoidCtx[T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		fn(ctx, v1, v2, v3, v4, v5, v6, v7)
	}

	return
}

func Monad7VoidCtx[T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) {
		Apply7VoidCtx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7VoidErr[T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		return fn(v1, v2, v3, v4, v5, v6, v7)
	}

	return
}

func Monad7VoidErr[T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (err error) {
		return Apply7VoidErr(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7VoidCtxErr[T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		return fn(ctx, v1, v2, v3, v4, v5, v6, v7)
	}

	return
}

func Monad7VoidCtxErr[T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (err error) {
		return Apply7VoidCtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7[R1, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1 := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1)
	}

	return
}

func Monad7[R1, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1]) {
		return Apply7(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7Ctx[R1, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1 := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1)
	}

	return
}

func Monad7Ctx[R1, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1]) {
		return Apply7Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7Err[R1, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, err := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), err
	}

	return
}

func Monad7Err[R1, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], err error) {
		return Apply7Err(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply7CtxErr[R1, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), err
	}

	return
}

func Monad7CtxErr[R1, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], err error) {
		return Apply7CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply72[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2 := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad72[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply72(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply72Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2 := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad72Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply72Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply72Err[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, err := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad72Err[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply72Err(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply72CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad72CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply72CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply73[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3 := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad73[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply73(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply73Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad73Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply73Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply73Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, err := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad73Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply73Err(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply73CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad73CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply73CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply74[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad74[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply74(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply74Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad74Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply74Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply74Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad74Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply74Err(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply74CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad74CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply74CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply75[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad75[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply75(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply75Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad75Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply75Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply75Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad75Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply75Err(t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply75CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad75CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply75CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, fn)
	}
}

func Apply8Void[T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		fn(v1, v2, v3, v4, v5, v6, v7, v8)
	}

	return
}

func Monad8Void[T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) {
		Apply8Void(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8VoidCtx[T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)
	}

	return
}

func Monad8VoidCtx[T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) {
		Apply8VoidCtx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8VoidErr[T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		return fn(v1, v2, v3, v4, v5, v6, v7, v8)
	}

	return
}

func Monad8VoidErr[T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (err error) {
		return Apply8VoidErr(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8VoidCtxErr[T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		return fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)
	}

	return
}

func Monad8VoidCtxErr[T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (err error) {
		return Apply8VoidCtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1 := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1)
	}

	return
}

func Monad8[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1]) {
		return Apply8(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8Ctx[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1)
	}

	return
}

func Monad8Ctx[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1]) {
		return Apply8Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8Err[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, err := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), err
	}

	return
}

func Monad8Err[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], err error) {
		return Apply8Err(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply8CtxErr[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), err
	}

	return
}

func Monad8CtxErr[R1, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], err error) {
		return Apply8CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply82[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2 := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad82[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply82(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply82Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad82Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply82Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply82Err[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, err := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad82Err[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply82Err(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply82CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad82CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply82CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply83[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3 := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad83[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply83(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply83Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad83Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply83Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply83Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, err := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad83Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply83Err(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply83CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad83CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply83CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply84[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad84[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply84(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply84Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad84Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply84Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply84Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad84Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply84Err(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply84CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad84CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply84CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply85[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad85[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply85(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply85Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad85Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply85Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply85Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad85Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply85Err(t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply85CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad85CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply85CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, fn)
	}
}

func Apply9Void[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}

	return
}

func Monad9Void[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) {
		Apply9Void(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9VoidCtx[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9),
) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}

	return
}

func Monad9VoidCtx[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) {
		Apply9VoidCtx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9VoidErr[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		return fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}

	return
}

func Monad9VoidErr[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (err error) {
		return Apply9VoidErr(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9VoidCtxErr[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (err error),
) (err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		return fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}

	return
}

func Monad9VoidCtxErr[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (err error) {
		return Apply9VoidCtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1 := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1)
	}

	return
}

func Monad9[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1]) {
		return Apply9(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9Ctx[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1),
) (r1 Opt[R1]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1)
	}

	return
}

func Monad9Ctx[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1]) {
		return Apply9Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9Err[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, err := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), err
	}

	return
}

func Monad9Err[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], err error) {
		return Apply9Err(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply9CtxErr[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, err error),
) (r1 Opt[R1], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), err
	}

	return
}

func Monad9CtxErr[R1, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], err error) {
		return Apply9CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply92[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2 := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad92[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply92(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply92Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2),
) (r1 Opt[R1], r2 Opt[R2]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2)
	}

	return
}

func Monad92Ctx[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2]) {
		return Apply92Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply92Err[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, err := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad92Err[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply92Err(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply92CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, err error),
) (r1 Opt[R1], r2 Opt[R2], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), err
	}

	return
}

func Monad92CtxErr[R1, R2, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], err error) {
		return Apply92CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply93[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3 := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad93[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply93(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply93Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3)
	}

	return
}

func Monad93Ctx[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3]) {
		return Apply93Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply93Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, err := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad93Err[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply93Err(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply93CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), err
	}

	return
}

func Monad93CtxErr[R1, R2, R3, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], err error) {
		return Apply93CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply94[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4 := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad94[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply94(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply94Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4)
	}

	return
}

func Monad94Ctx[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4]) {
		return Apply94Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply94Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, err := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad94Err[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply94Err(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply94CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), err
	}

	return
}

func Monad94CtxErr[R1, R2, R3, R4, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], err error) {
		return Apply94CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply95[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, x5 := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad95[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply95(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply95Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, x5 := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5)
	}

	return
}

func Monad95Ctx[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5]) {
		return Apply95Ctx(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply95Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, x5, err := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad95Err[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply95Err(t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}

func Apply95CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9],
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	v1, ok1 := t1.Get()
	v2, ok2 := t2.Get()
	v3, ok3 := t3.Get()
	v4, ok4 := t4.Get()
	v5, ok5 := t5.Get()
	v6, ok6 := t6.Get()
	v7, ok7 := t7.Get()
	v8, ok8 := t8.Get()
	v9, ok9 := t9.Get()

	if ok1 && ok2 && ok3 && ok4 && ok5 && ok6 && ok7 && ok8 && ok9 {
		x1, x2, x3, x4, x5, err := fn(ctx, v1, v2, v3, v4, v5, v6, v7, v8, v9)

		return Literal(x1), Literal(x2), Literal(x3), Literal(x4), Literal(x5), err
	}

	return
}

func Monad95CtxErr[R1, R2, R3, R4, R5, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	fn func(ctx context.Context, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) (r1 R1, r2 R2, r3 R3, r4 R4, r5 R5, err error),
) func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
	return func(ctx context.Context, t1 Opt[T1], t2 Opt[T2], t3 Opt[T3], t4 Opt[T4], t5 Opt[T5], t6 Opt[T6], t7 Opt[T7], t8 Opt[T8], t9 Opt[T9]) (r1 Opt[R1], r2 Opt[R2], r3 Opt[R3], r4 Opt[R4], r5 Opt[R5], err error) {
		return Apply95CtxErr(ctx, t1, t2, t3, t4, t5, t6, t7, t8, t9, fn)
	}
}
