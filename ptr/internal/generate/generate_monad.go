//go:build generate_monad

package main

import (
	_ "embed"

	"bytes"
	"fmt"
	"io/fs"
	"log/slog"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

const (
	monadGeneratorPath = "internal/generate/generate_monad.go"
	filename           = "monad.go"

	ownerWritePermission = 0o644

	argumentsLimit = 9
	resultsLimit   = 5
)

var (
	//go:embed tmpl/monad.gotmpl
	monadRaw string
)

type Variant struct {
	N, M int
	Ctx  bool
	Err  bool
}

func main() {
	funcMap := template.FuncMap{
		"add": func(x, y int) int { return x + y },
	}
	monadTmpl := template.Must(template.New("apply").Funcs(funcMap).Parse(monadRaw))

	pkg := detectPackageName()

	var buf bytes.Buffer

	buf.WriteString("// Code generated by generate_monad.go; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("package %s\n\n", pkg))
	buf.WriteString(fmt.Sprintf("//go:generate go run %s\n", monadGeneratorPath))
	buf.WriteString("import (\n\t\"context\"\n)\n")

	for n := 1; n <= argumentsLimit; n++ {
		for m := 0; m <= resultsLimit; m++ {
			for _, args := range []Variant{
				{n, m, false, false},
				{n, m, true, false},
				{n, m, false, true},
				{n, m, true, true},
			} {
				err := monadTmpl.Execute(&buf, args)
				if err != nil {
					panic(err)
				}
			}
		}
	}

	err := os.WriteFile(filename, buf.Bytes(), fs.FileMode(ownerWritePermission))
	if err != nil {
		panic(err)
	}

	slog.Info("done")
}

func detectPackageName() string {
	out, err := exec.Command("go", "list", "-f", "{{.Name}}").Output()
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(string(out))
}
